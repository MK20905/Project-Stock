import dash
from dash import dcc, html, Input, Output, dash_table
import pandas as pd
import requests
from io import StringIO
from flask_caching import Cache
import plotly.graph_objs as go
import numpy as np

app = dash.Dash(__name__, suppress_callback_exceptions=True)
cache = Cache(app.server, config={'CACHE_TYPE': 'SimpleCache', 'CACHE_DEFAULT_TIMEOUT': 600})

finviz_url = "https://elite.finviz.com/export.ashx?v=111&f=allYourFilters&auth=b5d3db9b-199c-46fc-a163-b75245047e62"

@cache.memoize(timeout=600) 
def fetch_finviz_data():
    headers = {
        "User -Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    }
    response = requests.get(finviz_url, headers=headers)
    
    if response.status_code == 200:
        try:
            df = pd.read_csv(StringIO(response.text))
            df.columns = df.columns.map(str)  # Ensure all column names are strings
            return df
        except Exception as e:
            return pd.DataFrame({"Error": [f"Failed to parse data: {e}"]})
    elif response.status_code == 429:
        return pd.DataFrame({"Error": ["Rate limit exceeded. Please try again later."]})
    else:
        return pd.DataFrame({"Error": [f"Failed to fetch data. Status code: {response.status_code}"]})

def fetch_detailed_stock_data(ticker_symbol):
    df = fetch_finviz_data()
    stock_data = df[df['Ticker'] == ticker_symbol]
    if stock_data.empty:
        return pd.DataFrame({"Error": ["No data found for this ticker."]})
    
    data = {
        "Index": stock_data['Index'].values[0] if 'Index' in stock_data.columns else "N/A",
        "Market Cap": stock_data['MarketCap'].values[0] if 'MarketCap' in stock_data.columns else "N/A",
        "P/E": stock_data['P/E'].values[0] if 'P/E' in stock_data.columns else "N/A",
        "Forward P/E": stock_data['Forward P/E'].values[0] if 'Forward P/E' in stock_data.columns else "N/A",
        "EPS (ttm)": stock_data['EPS (ttm)'].values[0] if 'EPS (ttm)' in stock_data.columns else "N/A",
        "EPS (next Y)": stock_data['EPS (next Y)'].values[0] if 'EPS (next Y)' in stock_data.columns else "N/A",
        "EPS Growth": stock_data['EPS growth next 5 years'].values[0] if 'EPS growth next 5 years' in stock_data.columns else "N/A",
        "Revenue": stock_data['Sales'].values[0] if 'Sales' in stock_data.columns else "N/A",
        "Operating Margin": stock_data['Operating Margin'].values[0] if 'Operating Margin' in stock_data.columns else "N/A",
        "ROE": stock_data['ROE'].values[0] if 'ROE' in stock_data.columns else "N/A",
        "Debt/Equity": stock_data['Debt/Eq'].values[0] if 'Debt/Eq' in stock_data.columns else "N/A",
        "Beta": stock_data['Beta'].values[0] if 'Beta' in stock_data.columns else "N/A",
        "Volume": stock_data['Volume'].values[0] if 'Volume' in stock_data.columns else "N/A",
        "52 Week High": stock_data['52W High'].values[0] if '52W High' in stock_data.columns else "N/A",
        "52 Week Low": stock_data['52W Low'].values[0] if '52W Low' in stock_data.columns else "N/A",
        "Target Price": stock_data['Target Price'].values[0] if 'Target Price' in stock_data.columns else "N/A"
    }
    return pd.DataFrame(data.items(), columns=["Metric", "Value"])

def generate_dummy_historical_data():
    # Generate dummy historical data for the last 30 days
    dates = pd.date_range(end=pd.Timestamp.today(), periods=30)
    prices = np.random.uniform(low=100, high=200, size=(30,))  # Random prices
    volume = np.random.randint(low=1000, high=10000, size=(30,))  # Random volume

    # Create a DataFrame
    historical_data = pd.DataFrame({
        'Date': dates,
        'Open': prices,
        'High': prices + np.random.uniform(0, 10, size=(30,)),  # High is higher than Open
        'Low': prices - np.random.uniform(0, 10, size=(30,)),   # Low is lower than Open
        'Close': prices + np.random.uniform(-5, 5, size=(30,)),  # Close is around Open
        'Volume': volume
    })

    # Calculate SMAs
    historical_data['SMA20'] = historical_data['Close'].rolling(window=20).mean()
    historical_data['SMA50'] = historical_data['Close'].rolling(window=50).mean()
    historical_data['SMA200'] = historical_data['Close'].rolling(window=200).mean()

    return historical_data

def main_page():
    df = fetch_finviz_data()
    if df.empty or "Error" in df.columns:
        return html.Div("No data available. Please check your Finviz configuration.", 
                        style={'textAlign': 'center', 'color': 'red'})

    return html.Div([
        html.Div([
            html.H1("Stock Screener", style={'textAlign': 'center', 'color': '#007BFF'}),
            html.Div([
                html.Button("Refresh Data", id="refresh-button", n_clicks=0, style={
                    'backgroundColor': '#007BFF', 'color': 'white', 'padding': '10px 20px', 'borderRadius': '5px', 'border': 'none', 'cursor': 'pointer'
                }),
                dcc.RadioItems(
                    id='refresh-interval-radio',
                    options=[
                        {'label': '10s', 'value': 10},
                        {'label': '1min', 'value': 60},
                        {'label': '3min', 'value': 180},  
                        {'label': '5min', 'value': 300},  
                        {'label': 'off', 'value': 0},
                    ],
                    value=0, 
                    labelStyle={'marginRight': '20px'}
                )
            ], style={'display': 'flex', 'alignItems': 'center', 'marginBottom': '20px'}),
            dcc.Interval(id='refresh-interval', interval=0, n_intervals=0),

            # Search Bar
            dcc.Input(id='search-input', type='text', placeholder='Search Ticker...', style={'marginBottom': '20px', 'width': '300px', 'padding': '10px', 'borderRadius': '5px', 'border': '1px solid #007BFF'}),

            html.Div([
                html.Label("Sort By:", style={'fontWeight': 'bold'}),
                dcc.Dropdown(
                    id='sort-by-dropdown',
                    options=[
                        {'label': col, 'value': col} for col in df.columns 
                    ],
                    value='Ticker',
                    style={'width': '45%', 'display': 'inline-block', 'marginRight': '10px'}
                ),
                dcc.RadioItems(
                    id='sort-order',
                    options=[
                        {'label': 'Ascending', 'value': 'asc'},
                        {'label': 'Descending', 'value': 'desc'}
                    ],
                    value='asc',
                    style={'display': 'inline-block'}
                )
            ], style={'marginBottom': '20px'}),

            # Main table
            dash_table.DataTable(
                id='main-table',
                columns=[{"name": col, "id": col} for col in df.columns],
                data=df.to_dict('records'),
                style_table={'overflowX': 'auto', 'border': '1px solid #007BFF'},
                style_cell={'textAlign': 'left', 'padding': '10px', 'border': '1px solid #f4f4f4'},
                style_header={'backgroundColor': '#007BFF', 'fontWeight': 'bold', 'color': 'white'},
                style_data_conditional=[
                    {
                        'if': {'column_id': 'Ticker'},
                        'cursor': 'pointer',
                        'color': 'blue',
                        'textDecoration': 'underline',
                    }
                ],
                page_size=10
            ),

            html.Div("Click on a ticker to view detailed analysis.",
                     style={'textAlign': 'center', 'marginTop': '10px'}),
        ], style={'padding': '20px', 'backgroundColor': '#f9f9f9', 'borderRadius': '10px', 'boxShadow': '0 4px 8px rgba(0,0,0,0.1)', 'margin': '20px'})
    ])

def detail_page(ticker_symbol):
    details_df = fetch_detailed_stock_data(ticker_symbol)
    historical_data = generate_dummy_historical_data()  # Generate dummy historical data

    return html.Div([
        html.H1(f"Details for {ticker_symbol}", style={'textAlign': 'center', 'color': '#007BFF'}),
        
        html.Label("Stock Metrics", style={'fontWeight': 'bold'}),
        dash_table.DataTable(
            columns=[{"name": col, "id": col} for col in details_df.columns],
            data=details_df.to_dict('records'),
            style_table={'overflowX': 'auto', 'border': '1px solid #007BFF'},
            style_cell={'textAlign': 'left', 'padding': '10px', 'border': '1px solid #f4f4f4'},
            style_header={'backgroundColor': '#007BFF', 'fontWeight': 'bold', 'color': 'white'},
        ),

        dcc.Graph(
            id='candlestick-chart',
            figure={
                'data': [
                    go.Candlestick(
                        x=historical_data['Date'],
                        open=historical_data['Open'],
                        high=historical_data['High'],
                        low=historical_data['Low'],
                        close=historical_data['Close'],
                        name='Candlestick'
                    )
                ],
                'layout': go.Layout(title='Candlestick Chart', xaxis_title='Date', yaxis_title='Price')
            }
        ),

        dcc.Graph(
            id='volume-chart',
            figure={
                'data': [
                    go.Bar(
                        x=historical_data['Date'],
                        y=historical_data['Volume'],
                        name='Volume'
                    )
                ],
                'layout': go.Layout(title='Volume Chart', xaxis_title='Date', yaxis_title='Volume')
            }
        ),

        # Link back to the main page
        dcc.Link('Back to Main Page', href='/', 
                 style={'textAlign': 'center', 'fontSize': '20px', 'color': '#007BFF'})
    ])

# ----------------------------------------------------------------------
# Callbacks
# ----------------------------------------------------------------------
@app.callback(
    [Output('main-table', 'data'),
     Output('refresh-interval', 'interval')],
    [Input('refresh-button', 'n_clicks'),
     Input('refresh-interval-radio', 'value'),
     Input('sort-by-dropdown', 'value'),
     Input('sort-order', 'value'),
     Input('search-input', 'value')],
    prevent_initial_call=True
)
def update_main_table(n_clicks, refresh_value, sort_by, sort_order, search_value):
    if refresh_value == 0:  
        interval = 0
    else:
        interval = refresh_value * 1000  
    df = fetch_finviz_data()
    
    # Filter by search input
    if search_value:
        df = df[df['Ticker'].str.contains(search_value, case=False, na=False)]

    ascending = (sort_order == 'asc')
    df = df.sort_values(by=sort_by, ascending=ascending)

    return df.to_dict('records'), interval

@app.callback(
    Output('url', 'pathname'),
    [Input('main-table', 'active_cell')],
    [dash.dependencies.State('main-table', 'data')]
)
def navigate_to_ticker(active_cell, table_data):
    if active_cell:
        row = active_cell['row']
        ticker_symbol = table_data[row]['Ticker'] 
        return f'/ticker/{ticker_symbol}' 
    return '/'

@app.callback(
    Output('page-content', 'children'),
    Input('url', 'pathname')
)
def display_page(pathname):
    if pathname == '/' or pathname is None:
        return main_page()
    elif pathname.startswith('/ticker/'):
        ticker_symbol = pathname.split('/')[2]
        return detail_page(ticker_symbol)
    else:
        return html.H1("404: Page Not Found", style={'textAlign': 'center', 'color': 'red'})

app.layout = html.Div([
    dcc.Location(id='url', refresh=False),
    html.Div(id='page-content', children=main_page())
])

if __name__ == '__main__':
    app.run_server(debug=True)